SQL DATABASES
        DDL -Data Definition Language
            (Chapter 11 thru .. )

CHAPTER 11 (page 335)

    Intro to DDL.
        Will need to use create SQL Statements to build a database.
        CANNOT use SSMS to build a databaseand Nor Azure Data Studio.

    CREATE 
        Create DATABASE <give it a name>
        Create Table <name>

    DROP  -is delete
        Drop database <name>
        Drop Table <name>
    
    ALTER  -modifies the data
        Alter Table
        Alter Function.

    Other statements;
        Sequence deals with primary keys and foreign keys
        Function - we covered, but you can create specific functions.
        Procedure - scripts that we can create and execute.
        Triggers -forget about, will never do.
        View -query that you want to store in the database.
                    Join 4 tables, save it and it becomes a specific view.

Rules for Object names

    As in Database names or Table names, they have specific Rules
    the first character can be Underscore _ or @ or #.  (@Vendors Table)
    Cannot start it with a number.  (cannot do 1Vendors Table)

    Dont make the names too short or too long.
    1,2,or3 words slammed together is good.

    Cant be Transact-SQL reserved keyword like SELECT, UPDATE, FROM, etc.

CREATE DATABASE

    Create database <name>
        we are not using the [On [Primary] (Filename = 'file_name')] 
        Just create database <name>

        POINT to the Master database and not one of the other databases.

Use Master;
    means if I am not in the master database make sure to change to 
    master to run the script.

DROP Database IF EXISTS
    Will drop it if it exists or nothing.

Creating Tables

<Open the Bootcamp DB Creation Script for example>

    use master;

    Drop Database if exists Bootcamp;

    Create Database Bootcamp;

    Use Bootcamp;

    Create Table Students(
        StudentID Int NOT NULL Primary Key Identity(1, 1),
        <List out the rest of the colums needed>
    );
    
    Create Table GraduationRequirements (
        ID int Not Null Primary Key Identity(1, 1),
        StudentID int Not Null Foreign Key References Students(StudentID),
        <List out the rest of the columns needed>
    );

Primary Key makes it unique, does not need to be in sequence. 
        make sure PK has no relation to data point to, like last name may change.

Create Table <name> (column-name datatype[string, int, etc] null Primary Key Identity(1, 1))
                    --Primary Key identity(first number 1, increments of 1) -can be anything we want.

Forgein Key must match the same table format as the primary key.
        StudentID int Not Null Primary Key Identity(1, 1)
        StudentID int Not Null Foreign Key References Students(StudentID),
                --Need to use the References then PK Table(column)

UNIQUE  -is used to confirm a unique value per row. Like Phone Number.


In Azure Studio you can use Shift+Alt+Down Arrow to copy/past a section.
        Then you can use Ctrl+Alt+Down Arrow to get Multiple Cursors and change 
        a bunch of lines all at once!!


CREATE INDEX

    Do a search query using something with an index in it, it will go find the index
    and return the primary key.

    If you do a search without index, it will go line by line looking for it.  Which could take
    a long time if you have millions of lines.

    BUT more work for updates / maintenance as the Index's have to be updated as well.

    PERFORMANCE TOOL -example call government and give SSN.  Rather than it searching throughout
        millions of SSNs to match it will find in an index then point to the primary key where the SSN is 
        located.

    CREATE INDEX IDX_FirstName       Create Index <indexname>
        ON Students (FirstName);         ON <table (column)>;

CONSTRAINTS

    Using CHECK to limit the values for the column.
    Score int Null CHECK (Score >= 0 AND Score <= 120),


Foreign Key CONSTRAINTS
        Automatically says no action.
    ON DELETE {Cascade or No Action}
    ON UPDATE {Cascade or No Action}

ALTER Table
        Typically means you are changing columns in the table.
    Make Changes to a table that already exists.
    Or change the columns, use ALTER.

    Alter Table <table name>
    Add CHECK (InvoiceTotal >= 1)

    ALTER Table Students
	Alter Column LastName varchar(100);

CHAPTER 15

PROCEDURES

    If you cant put in a default value for parameter just use NULL

    CREATE or ALTER Proc <name your procedure>
            (do not have to put sp before the name)
    as
        SELECT statement
        FROM
            ON if Joining
        WHERE..
    go

    exec <procedure name>;

    A procedure that displays all of the invoices for a vendor.
    
    EXAMPLE;
    Create or Alter Procedure InvoicesForVendor
	    @VendorName varchar(30) = '%'  --Parameter saying anything entered in
    as
	    SELECT VendorName, i.*
	    FROM Vendors v JOIN Invoices i
		    ON v.VendorID = i.VendorID
	    WHERE VendorName LIKE @VendorName --Parameter placed down here to search by it
	    ORDER BY VendorName;
    go

    exec InvoicesForVendor @VendorName = '%Pr%'; --enter in the search parameter

Positional Query
     
     EXEC InvoicesbyDateRange @MaxDate='1/31/2020', @MinDate='1/1/2020';
        if you use the parameter name you can put them in any order.

Optional Parameters

    Create or Alter Procedure InvoicesByDateRange
	@MinDate varchar(30) = NULL,
	@MaxDate varchar(30) = NULL  --GetDate function does not work here.
AS
	IF @MinDate is Null
		SET @MinDate = '01/01/1900';
	IF @MaxDate is NULL
		SET @MaxDate = GetDate(); --Enter GetDate function here instead for todays date as MAX.
	SELECT *
	FROM Invoices
	WHERE InvoiceDate between @MinDate and @MaxDate
	ORDER BY InvoiceDate;
GO

Exec InvoicesByDateRange @MaxDate='1/31/2020', @MinDate='1/1/2020';

CREATE VARIABLE
    Using DECLARE not data passed through but contained within the script.
    Declare a variable to point to it in rest of your code.
        That way you only have to change the data once on the DECLARE.
    
ERROR returns
    If @PartNbr is NULL 
        return -1;

Connecting Parameters to 

    USER is entering in the Vendor Code, since they dont know the Vendor ID
    We are using a parameter of @VendorCode then changing that into ID.
    Declaring a variable of @VendorID tying it to the VendorCode so it inserts.

    Declare @VendorID int;

	SELECT @VendorID = ID 
		FROM Vendors
		WHERE Code = @VendorCode

Return

    Error checking.  Once you hit Return it stops the procedure.

    DECLARE @rc int;
    EXEC @rc = AddProduct @PartNbr = 'FireTV', @Name='Fire TV', @Price=175, @VendorCode='AMAZ';
    PRINT 'Return Code is ' + STR(@rc);