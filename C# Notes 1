Intro -Chapter 1 and Chapter 2


    Console App C# all platforms, not .net framework.  
    Naming a project.
        Dash gets converted to underscore, cannot use dashes.
    In General do not check place solution & project in same folder.
    Keep Solution sep
    Use .Net 6.0 LTS.  .Net 7.0 coming in November 2022
        Dont check the box do not use top level statements.

Program.CS
    program class will execute what is written in there

    C# code files will have a .cs extension

C# uses double quotes for Strings
    Not single like sql or javascript.

C# is Case Sensitive.
    You cannot put console.writeline("hello, world");
    It doesnt recognize that statement.

    Statements must always end with semicolon ;

Commenting
    // single line
    /*  */ multi ling
    /// or some other way will send all comments to website for viewing.

Block of code
    one or more lines surrounding by braces {}
    aka Statement block
    can be nested as deeply as you want

CLASS
    shows a bunch of system statements point to libraries basically
    
    Classes are foundational pieces
    we will be working in Classes.

    One class per source file

NAMESPACE

    Give a high level name to classes
    You cannot do a public class console, as that is in the system namespace

    You can create your own namespace
    namespace MAX {

        public class Console {
            public static void Run() {
                System.Console.WriteLine("Inside the console class.")
            }
        }
    }
        THIS above shows that inside the MAX library (namespace) you will 
        have to call in the System one to use it instead.

        Two Classes could be worked on at the same time by two 
        different people, to tell them apart is the namespace.

        The new console class would be MAX.Console vs System.Console

METHOD
    inside of a class and always have parens
    action word
    braces after will have a statement that executes when the method
    executes.
        Run(string aName)

Parameter
    basically a variable placed inside the method parens that you can pass data into.
        so the (string aName) is a parameter.
    Only referenced inside the method as well.

PROPERTIES
    Attributes about the thing you are modeling.
    example modeling students, properties would be attributes about each
    like first name, last name, birth date, address, etc.

STRINGS
    Are virtually unlimited, do not specify the length.

= sign is assigning, not equal to
    s.FirstName = "Noah";
    Does not say are these two things equal, instead says take that value
    and store or assign it to the left value.

VOID 
 Void is used on a METHOD that doesnt return anything.
    public void Print() {
        System.Console.WriteLine(Code + Description + MinSAT);
    }
    THEN You can call the Print() using a variable.

Variable
    A name to store a piece of data temporarily only inside of the method.
    declare the type of variable.

    LOCAL Variable
        Exists inside of the method for example
        public void Print() {
            string message = 
        }
        The message variable is local to Print() only and does not 
        exist outside of that method.

INTERPOLATED STRINGS

Using $ to Console.WriteLine
    Console.WriteLine($"{i} + {j} = {sum}")
    This prints the variable plus variable  = sum.
    If you dont use the $ it prints everything as a string.
    Otherwise you have to write
    Console.WriteLine(i + " + " + j + " = " + sum)

Verbatim Strings
    Using @ in from of the "" to make it string out verbatim. 
        in case you have \t which means tab.

OR you \\t in order to show its a backslath and not tabbing.
Cant use verbatim with interpolated, so you would have to use double \\ in those cases.

STORING whole Numbers
    int i = 13  --or put the m there for decimals
    int j = 3

    int div = i / (decimal)j;
    using decimal in order to get 4.333.  Otherwise just 4.

    OR

    var i = 13.0m; --if you use 13.0 it goes to double. m goes to decimal.

    int div = i / j; returns 4.3333 as well.

Booleon
    bool to delcare the booleon.

Scope 
    is the lifetime of the variable, once outside the braces it goes away.
    local variable is in scope.

INITIALIZE Variables

    even if you are not yet declaring a value for your variable, use 0.
    decimal variable = 0;  this is initializing the variable as 0.
        later you can do variable = 25m / 10; which changes that.

Always use a TYPE if you can
    decimal or int or string.
    using VAR must be given a value, since it doesnt know the type.
        var variable; --does not know what the type is.
        var variable = 0m; -- this tells it a decimal.
        var variable = 0; -- this is an integar

Creating a class creates its own type
    max.major bus = this is using the class max.major as the type.

Either give the implicit type (int, decimal, string, etc.)
    or you can use var but then initialize it and use (m,f, "", etc.)


ARRAY

    A variable that can hold more than one value.
    Multiple strings, multiple int, multiple booleons.

    USE Square brackets next to type to indicate array.  
        int[] scores = new int[5]; 
    Make an Array plural to remind that its multiple items.
    The second square brackets are showing how many values, in the above its 5.

    Starts at 0, so 5 integers is 0, 1, 2, 3, 4.  You dont use 5, that would be 6 total.

    Either or works for the below.  The first one determines the number of values for the array by the 
    numbers that you have entered.  We entered 5 indexes in curly braces showing 5 total, but have to include 0
    since they do not default.

            int[] scores2 = new int[] { 100, 95, 97, 100, 0 };
            Console.WriteLine($"{scores2[0]}, {scores2[1]}, {scores2[2]}, {scores2[3]}, {scores2[4]}");

            int[] scores = new int[5];
            scores[0] = 100;
            scores[1] = 95;
            scores[2] = 97;
            scores[3] = 100;
            Console.WriteLine($"{scores[0]}, {scores[1]}, {scores[2]}, {scores[3]}, {scores[4]}");

On This ARRAY you dont need the new string after = sign.  Just string[] names = {}, or int[] scores = {}.
            string[] names = { "Josh", "Billy", "Karl", "Sam", "James", "Caleb", "Jack", "Ian" };
            Console.WriteLine($"{names[0]}, { names[1]}, { names[2]}, { names[3]}, { names[4]}, { names[5]}, { names[6]}, { names[7]}");

    Only problem with Fixed Arrays is that they cannot be any more or less than alrady defined.
    you are defining the total indexes.

FORMATTING OUTPUT

    Console.WriteLine($"{scores[0],5}, {scores[1],5}
    
    RIGHT ALIGN = Using the {scores[0],5} - will right align all of the numbers.
    CURRENCY = Using {scores[0],5:C} -will display as Currency $100.00

ReadLine()

    Getting data from the user.
        Console.Write("Enter a string and press Enter: ");
        string? response = Console.ReadLine();
ONLY returns a String and does not return a number!
You then have to convert it to a number if you want that.

CONVERT 
    Using convert.ToInt32

    Console.WriteLine("Guess a number from 1 to 10: ");
    string answer = Console.ReadLine();
    int myNumber = Convert.ToInt32(answer);
    Console.WriteLine($"The number is {myNumber}");

